@use "sass:map";
@use "../abstracts/breakpoints";

//
// Raster grid subsystem (rsms.me/raster)
//

$raster-element: ".raster" !default;
$grid-attribute: columns !default;
$cell-attribute: span !default;
$columns: 12 !default;
$default-cols: 4 !default;

$small-breakpoint: 600px;
$small-suffix: s;
$large-breakpoint: 1600px;
$large-suffix: l;

$include-debug: true !default;

$raster-breakpoints: (
  xs: 0,
  sm: 640px,
  lg: 1024px
) !default;

#{$raster-element} {
  --grid-template-columns: repeat(#{$default-cols}, 1fr);
  --grid-column-start: 1;
  --grid-column-end: -1;

  display: grid;
  grid-template-columns: var(--grid-template-columns);

  // Cell or column
  > * {
    appearance: none;
    display: block;
  }

  @each $breakpoint in map.keys($raster-breakpoints) {
    @include breakpoints.media-above($breakpoint, $raster-breakpoints) {
      $infix: if(breakpoints.minimum($breakpoint, $raster-breakpoints) == null, "", "-#{$breakpoint}");

      @for $i from 1 through $columns {
        &[#{$grid-attribute}#{$infix}="#{$i}"] {
          --grid-template-columns: repeat(#{$i}, 1fr);
        }
      }

      > {
        // span=start...
        @for $i from 1 through $columns {
          [#{$cell-attribute}#{$infix}^="#{$i}"] {
            --grid-column-start: #{$i};
          }
        }

        // span=...+width, span=...-end
        [#{$cell-attribute}#{$infix}$="+1"],
        [#{$cell-attribute}="1"] {
          --grid-column-end: 1;
        }

        @for $i from 1 through $columns {
          [#{$cell-attribute}#{$infix}$="+#{$i}"],
          [#{$cell-attribute}#{$infix}$="-#{$i - 1}"],
          [#{$cell-attribute}#{$infix}="#{$i}"] {
            --grid-column-end: #{$i};
          }
        }

        [#{$cell-attribute}#{$infix}$="-#{$columns}"] {
          --grid-column-end: #{$columns + 1};
        }

        // Connect vars
        [#{$cell-attribute}#{$infix}] {
          grid-column-end: span var(--grid-column-end);
        }

        [#{$cell-attribute}#{$infix}*="+"],
        [#{$cell-attribute}#{$infix}*="-"],
        [#{$cell-attribute}#{$infix}*=".."] {
          grid-column-start: var(--grid-column-start);
        }

        [#{$cell-attribute}#{$infix}*="-"],
        [#{$cell-attribute}#{$infix}*=".."] {
          grid-column-end: var(--grid-column-end);
        }

        [#{$cell-attribute}#{$infix}="row"] {
          grid-column: 1 / -1;
        }
      }
    }
  }

  @if $include-debug {
    &.is-debug {
      > * {
        --color: hsla(7, 92%, 66%, 0.3);
        background-image: linear-gradient(to bottom, var(--color) 0%, var(--color) 100%);
      }

      > :nth-child(6n+2) { --color: hsla(227, 53%, 61%, 0.3); }
      > :nth-child(6n+3) { --color: hsla(40, 71%, 58%, 0.3); }
      > :nth-child(6n+4) { --color: hsla(137, 63%, 57%, 0.3); }
      > :nth-child(6n+5) { --color: hsla(299, 62%, 63%, 0.3); }
      > :nth-child(6n+6) { --color: hsla(184, 57%, 60%, 0.3); }
      > :nth-child(6n+7) { --color: hsla(7, 92%, 66%, 0.3); }
    }
  }
}
