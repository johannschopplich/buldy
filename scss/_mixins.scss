//
// Placeholders
//

@mixin block {
  &:not(:last-child) {
    margin-bottom: var(--space-small);
  }
}

%block {
  @include block;
}

@mixin unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
}

%unselectable {
  @include unselectable;
}

@mixin focus-outlined {
  &:focus {
    outline: 3px solid var(--color-primary);
    outline-offset: 2px;
  }
}

%focus-outlined {
  @include focus-outlined;
}

// Add transitions where needed
@mixin transition($transition...) {
  @if length($transition) == 0 {
    transition: all 0.2s ease-in-out;
  } @else {
    transition: $transition;
  }

  @media (prefers-reduced-motion: reduce) {
    transition: none;
  }
}

@mixin delete {
  @extend %unselectable;

  -webkit-appearance: none;
  -moz-appearance: none;
  display: inline-block;
  width: 20px;
  min-width: 20px;
  max-width: 20px;
  height: 20px;
  min-height: 20px;
  max-height: 20px;
  background-color: rgba(0, 0, 0, 0.2);
  border: none;
  border-radius: var(--radius-rounded);
  cursor: pointer;
  pointer-events: auto;
  flex-grow: 0;
  flex-shrink: 0;
  font-size: 0;
  outline: none;
  position: relative;
  vertical-align: top;

  &::before,
  &::after {
    content: "";
    display: block;
    position: absolute;
    left: 50%;
    top: 50%;
    background-color: white;
    transform: translateX(-50%) translateY(-50%) rotate(45deg);
    transform-origin: center center;
  }

  &::before {
    width: 50%;
    height: 2px;
  }

  &::after {
    width: 2px;
    height: 50%;
  }

  &:hover,
  &:focus {
    background-color: rgba(0, 0, 0, 0.3);
  }

  &:active {
    background-color: rgba(0, 0, 0, 0.4);
  }
}

%delete {
  @include delete;
}

@mixin overlay($offset: 0) {
  position: absolute;
  top: $offset;
  right: $offset;
  bottom: $offset;
  left: $offset;
}

%overlay {
  @include overlay;
}

//
// Breakpoint mixins
//

@mixin breakpoint($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "#{$name}");
}
