$grid-columns: 12 !default;

.grid {
  display: grid;
  gap: var(--grid-gap, 0px);

  &:not(.is-auto) {
    --grid-columns: #{$grid-columns};
    grid-template-columns: repeat(var(--grid-columns), 1fr);

    > * {
      grid-column: span var(--span, #{$grid-columns}) / span var(--span, #{$grid-columns});
    }
  }

  &.is-auto {
    &.is-equal,
    &.is-xs,
    &.is-s,
    &.is-m,
    &.is-l,
    &.is-xl {
      grid-template-columns: repeat(auto-fit, minmax(var(--col-min-width), 1fr));
    }
  }

  @each $gap in $grid-gaps {
    &.has-gap-#{$gap} { --grid-gap: var(--space-#{$gap}); }
  }
}

//
// Breakpoints
//

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-above($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .grid {
      @for $i from 1 through $grid-columns {
        > .span-#{$i}#{$infix}         { --span: #{$i}; }
        > .span-start-#{$i}#{$infix}   { grid-column-start: #{$i}; }
        > .span-end-#{$i + 1}#{$infix} { grid-column-end: #{$i + 1}; }
      }

      > .span-start#{$infix}           { grid-column-start: 1; }
      > .span-end#{$infix}             { grid-column-end: -1; }

      > .span-start-auto#{$infix}      { grid-column-start: auto; }
      > .span-end-auto#{$infix}        { grid-column-end: auto; }

      &.is-auto {
        &.is-equal#{$infix} { --col-min-width: 0; }
        &.is-xs#{$infix}    { --col-min-width: 8rem; }
        &.is-s#{$infix}     { --col-min-width: 10rem; }
        &.is-m#{$infix}     { --col-min-width: 15rem; }
        &.is-l#{$infix}     { --col-min-width: 20rem; }
        &.is-xl#{$infix}    { --col-min-width: 25rem; }
      }
    }
  }
}
