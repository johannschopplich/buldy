$grid-columns: 12 !default;

.grid {
  display: grid;
  gap: var(--grid-gap, 0);

  &:not(.is-auto) {
    --grid-columns: #{$grid-columns};
    grid-template-columns: repeat(var(--grid-columns), 1fr);

    > * {
      grid-column: span var(--span, #{$grid-columns}) / span var(--span, #{$grid-columns});
    }
  }

  &.is-auto {
    &.is-xsmall,
    &.is-small,
    &.is-medium,
    &.is-large,
    &.is-xlarge {
      grid-template-columns: repeat(auto-fit, minmax(var(--col-min-width), 1fr));
    }
  }

  &.has-gap-xs { --grid-gap: var(--space-xs); }
  &.has-gap-s  { --grid-gap: var(--space-s); }
  &.has-gap-m  { --grid-gap: var(--space-m); }
  &.has-gap-l  { --grid-gap: var(--space-l); }
  &.has-gap-xl { --grid-gap: var(--space-xl); }
}

//
// Breakpoints
//

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-above($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .grid.is-auto {
      &.is-xsmall#{$infix} { --col-min-width: 8rem; }
      &.is-small#{$infix} { --col-min-width: 10rem; }
      &.is-medium#{$infix} { --col-min-width: 15rem; }
      &.is-large#{$infix} { --col-min-width: 20rem; }
      &.is-xlarge#{$infix} { --col-min-width: 25rem; }
    }

    .grid-auto-columns#{$infix} {
      grid-template-columns: repeat(auto-fit, minmax(0, 1fr));
    }

    @for $i from 1 through $grid-columns {
      .column-#{$i}#{$infix} { --span: #{$i}; }
      .column-start-#{$i}#{$infix} { grid-column-start: #{$i}; }
      .column-end-#{$i + 1}#{$infix} { grid-column-end: #{$i + 1}; }
    }

    .column-start#{$infix} { grid-column-start: 1; }
    .column-end#{$infix}   { grid-column-end: -1; }

    .column-start-auto#{$infix} { grid-column-start: auto; }
    .column-end-auto#{$infix}   { grid-column-end: auto; }
  }
}
