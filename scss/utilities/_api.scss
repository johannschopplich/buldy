@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "../abstracts/breakpoints";
@use "utilities";

@mixin generate-utility($utility, $infix) {
  $values: map.get($utility, values);

  // If the values are a list or string, convert it into a map
  @if meta.type-of($values) ==
    "string" or
    meta.type-of(list.nth($values, 1)) !=
    "list"
  {
    $values: list.zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map.get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if meta.type-of($properties) == "string" {
      $properties: list.append((), $properties);
    }

    // Use custom class if present
    $property-class: if(
      map.has-key($utility, class),
      map.get($utility, class),
      list.nth($properties, 1)
    );
    $property-class: if($property-class == null, "", $property-class);

    $infix: if(
      $property-class == "" and string.slice($infix, 1, 1) == "-",
      string.slice($infix, 2),
      $infix
    );

    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if(
      $key,
      if($property-class == "" and $infix == "", "", "-") + $key,
      ""
    );

    .#{$infix + $property-class + $property-class-modifier} {
      @each $property in $properties {
        // stylelint-disable-next-line declaration-no-important
        #{$property}: $value !important;
      }
    }
  }
}

// Loop over each breakpoint
@each $breakpoint in map.keys(breakpoints.$default) {
  // Generate media query if needed
  @include breakpoints.media-above($breakpoint, breakpoints.$default) {
    $infix: breakpoints.infix($breakpoint, breakpoints.$default);

    // Loop over each utility property
    @each $key, $utility in utilities.$export {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Only proceed if responsive media queries are enabled or if it's the base media query
      @if meta.type-of($utility) ==
        "map" and
        (map.get($utility, responsive) or $infix == "")
      {
        @include generate-utility($utility, $infix);
      }
    }
  }
}
